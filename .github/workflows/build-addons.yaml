name: Build and Push Add-ons

on:
  push:
    branches: [ main, master ]
    paths:
      - 'sitespwa/**'
      - 'owncloud/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'sitespwa/**'
      - 'owncloud/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  REGISTRY_OWNER: ${{ github.repository_owner }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      sitespwa: ${{ steps.changes.outputs.sitespwa }}
      owncloud: ${{ steps.changes.outputs.owncloud }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            sitespwa:
              - 'sitespwa/**'
            owncloud:
              - 'owncloud/**'

  build-addons:
    needs: changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        addon: [ sitespwa, owncloud ]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      # Setup QEMU so multi-arch builds work
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: all

      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Determine which add-ons to build and base images per architecture
      - name: Set BUILD_FROM per platform
        id: buildargs
        run: |
          declare -A base
          if [ "${{ matrix.addon }}" = "sitespwa" ]; then
            base=( ["amd64"]="ghcr.io/home-assistant/amd64-base:3.22"
                   ["i386"]="ghcr.io/home-assistant/i386-base:3.22"
                   ["arm64"]="ghcr.io/home-assistant/aarch64-base:3.22"
                   ["armv7"]="ghcr.io/home-assistant/armv7-base:3.22"
                   ["armhf"]="ghcr.io/home-assistant/armhf-base:3.22" )
          else
            base=( ["amd64"]="ghcr.io/home-assistant/amd64-base-python:3.13-alpine3.22"
                   ["i386"]="ghcr.io/home-assistant/i386-base-python:3.13-alpine3.22"
                   ["arm64"]="ghcr.io/home-assistant/aarch64-base-python:3.13-alpine3.22"
                   ["armv7"]="ghcr.io/home-assistant/armv7-base-python:3.13-alpine3.22"
                   ["armhf"]="ghcr.io/home-assistant/armhf-base-python:3.13-alpine3.22" )
          fi
          echo "BUILD_FROM_AMD64=${base[amd64]}" >> $GITHUB_OUTPUT
          echo "BUILD_FROM_I386=${base[i386]}" >> $GITHUB_OUTPUT
          echo "BUILD_FROM_ARM64=${base[arm64]}" >> $GITHUB_OUTPUT
          echo "BUILD_FROM_ARMV7=${base[armv7]}" >> $GITHUB_OUTPUT
          echo "BUILD_FROM_ARMHF=${base[armhf]}" >> $GITHUB_OUTPUT

      - id: meta
        if: >
          github.event_name == 'workflow_dispatch' ||
          (matrix.addon == 'sitespwa' && needs.changes.outputs.sitespwa == 'true') ||
          (matrix.addon == 'owncloud' && needs.changes.outputs.owncloud == 'true')
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.REGISTRY_OWNER }}/${{ matrix.addon }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - if: steps.meta.conclusion == 'success'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.addon }}
          file: ./${{ matrix.addon }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64,linux/arm/v7,linux/386
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILD_FROM_AMD64=${{ steps.buildargs.outputs.BUILD_FROM_AMD64 }}
            BUILD_FROM_I386=${{ steps.buildargs.outputs.BUILD_FROM_I386 }}
            BUILD_FROM_ARM64=${{ steps.buildargs.outputs.BUILD_FROM_ARM64 }}
            BUILD_FROM_ARMV7=${{ steps.buildargs.outputs.BUILD_FROM_ARMV7 }}
            BUILD_FROM_ARMHF=${{ steps.buildargs.outputs.BUILD_FROM_ARMHF }}
